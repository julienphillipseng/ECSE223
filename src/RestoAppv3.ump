namespace ca.mcgill.ecse223.resto.model;

use RestoAppPersistence.ump;
use RestoAppTableStateMachine.ump;

class RestoApp {
   1 <@>- * Reservation reservations; // sorted by date and time
   1 <@>- * Table tables;
   0..1 -> * Table currentTables; // subsets tables
   0..1-> 0..1 Table takeoutOrderTable; //subset tables
   1 <@>- * Order orders;
   0..1 -> * Order currentOrders; // subsets orders
   1 <@>- 1 Menu menu;   
   1 <@>- * PricedMenuItem pricedMenuItems;
   1 <@>- * Bill bills;
  1 <@>- * TakeOutCustomer;
}

class Reservation {
   Date date;
   Time time;
   Integer numberInParty;
   contactName;
   contactEmailAddress;
   contactPhoneNumber;
   autounique reservationNumber;
   * reservations -- 1..* Table tables; // only from currentTables
   
   public static Date cleanDate(Date date) {
	   Calendar cal = Calendar.getInstance();
	   cal.setTimeInMillis(date.getTime());
	   cal.set(Calendar.HOUR_OF_DAY, 0);
	   cal.set(Calendar.MINUTE, 0);
       cal.set(Calendar.SECOND, 0);
	   cal.set(Calendar.MILLISECOND, 0);
	   java.util.Date tempCleanedDate = cal.getTime();
	   java.sql.Date cleanedDate = new java.sql.Date(tempCleanedDate.getTime());
	   return cleanedDate;
  }
  public boolean doesOverlap(Date date, Time time) {
	  date = Reservation.cleanDate(date); 
	  Date cTime = Reservation.cleanDate(new Date(time.getTime()));
	  java.util.Date tempDate = new java.util.Date(date.getTime() + time.getTime()-cTime.getTime());
	  
	  this.date = Reservation.cleanDate(this.date); 
	  Date cTime1 = Reservation.cleanDate(new Date(this.time.getTime()));
	  java.util.Date tempDateForReservation1 = new java.util.Date(this.date.getTime() + this.time.getTime()-cTime1.getTime() - 60*60*2*1000L);
	  java.util.Date tempDateForReservation2 = new java.util.Date(this.date.getTime() + this.time.getTime()-cTime1.getTime() + 60*60*2*1000L);
	  if(tempDate.before(tempDateForReservation1)||tempDate.after(tempDateForReservation2)) {
		  return false; 
	  }
	  return true; 
	  
  }
}

class Table {
   unique Integer number;
   Integer x;
   Integer y;
   Integer width;
   Integer length;
   1 <@>- 1..* Seat seats;
   0..1 -> * Seat currentSeats; // subsets seats
   public boolean doesOverlap(int x2, int y2, int width2, int length2){
    return x2 < this.x + this.width && x2 + width2 > this.x && y2 < this.y + 
		this.length && y2 + length2 > this.y;
  }
}

class Seat {
}

class Order {
   Date date;
   Time time;
   autounique number;
   * orders -- 1..* Table tables; // only from currentTables for currentOrders
   1 <@>- * OrderItem orderItems;
}

class OrderItem {
   Integer quantity;
   * orderItems -- 1 PricedMenuItem pricedMenuItem; // only from MenuItem.currentPricedMenuItem for currentOrders
   * orderItems -- 1..* Seat seats; // only from order.tables.seats
  
}

class Menu {   
   1 <@>- * MenuItem menuItems;
}

class MenuItem {
   unique name;
   enum ItemCategory { Appetizer, Main, Dessert, AlcoholicBeverage, NonAlcoholicBeverage }
   lazy ItemCategory itemCategory;
   1 -- 1..* PricedMenuItem pricedMenuItems;
   0..1 -> 0..1 PricedMenuItem currentPricedMenuItem; // subsets priced menus items
}

class PricedMenuItem {
   Double price;
}

class Bill {
   * bills -- 1 Order order; // order.bills.issuedForSeats = order.orderItems.seats
   * bills -- 1..* Seat issuedForSeats; // only from order.orderItems.seats;
}


class TakeOutCustomer{
  String name;
  unique phoneNumber;
  
  0..1 -- 1 Order;
  
}
